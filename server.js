// package used in creating this rest api in nodejs
var express = require('express');
// package used to invoke mpesa api's
const Mpesa = require("mpesa-node");

// used in storing the constant variables
var Constants = require('./lib/constants');
// package used in parsing the payloads
var bodyParser = require('body-parser');
// used for application logging for later troubleshooting
var morgan = require('morgan');
// used for application logging for later troubleshooting
var winston = require('./lib/winston');
// package used in managing http connections
var http = require('http');
// used to open relative paths
var path = require('path');
// create an instance of express package
var app = express();
// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))
// parse application/json
app.use(bodyParser.json())

// listen to api requests
///////////////////////////////////////////////////////////
// lipa na mpesa api requests
///////////////////////////////////////////////////////////
app.post('/mpesastkpush', function (req, res) {
    
  const mpesa =  new Mpesa({
    consumerKey: Constants.paybill_client_key,
    consumerSecret: Constants.paybill_client_secret,
    environment: Constants.environment,
    shortCode: Constants.paybill_shortcode1,
    initiatorName: Constants.paybill_initiator_name,
    lipaNaMpesaShortCode: Constants.lipanampesa_shortcode,
    lipaNaMpesaShortPass: Constants.lipanampesa_passkey,
    securityCredential: Constants.paybill_security_credentials,
    certPath: path.resolve(Constants.certificatepath)
 })
   // invoking the mpesa api
   mpesa
   .lipaNaMpesaOnline(
     req.body.PhoneNumber, 
     req.body.Amount, 
     Constants.ResultURL, 
     req.body.MerchantRequestID, 
     req.body.TransactionDesc, 
     Constants.TransactionType, 
     Constants.lipanampesa_shortcode, 
     Constants.lipanampesa_passkey
     ).then(res => {
      //Do something with the response
      winston.log('info', res.data);
      res.end();
      })
      .catch(error => {
      //Do something with the error;
      winston.log('error', error);
      res.end();
      })
    
   console.log("Waiting for the next request!");
})

///////////////////////////////////////////////////////////
// lipanampesa callback. 
// This is a callback from Mpesa informing us
// that a transaction we had earlier initiated has been approved successfully by the customer
///////////////////////////////////////////////////////////
app.post('/stkCallback', function (req, res) {

  // Sample payload from Mpesa
  /*
    {
    "Body": 
    {
      "stkCallback": 
      {
        "MerchantRequestID": "21605-295434-4",
        "CheckoutRequestID": "ws_CO_04112017184930742",
        "ResultCode": 0,
        "ResultDesc": "The service request is processed successfully.",
        "CallbackMetadata": 
        {
          "Item": 
          [
            {
              "Name": "Amount",
              "Value": 1
            },
            {
              "Name": "MpesaReceiptNumber",
              "Value": "LK451H35OP"
            },
            {
              "Name": "Balance"
            },
            {
              "Name": "TransactionDate",
              "Value": 20171104184944
            },
            {
              "Name": "PhoneNumber",
              "Value": 254727894083
            }
          ]
        }
      }
    }
  }
  */

  winston.log('info', req.body);
  // Do something with the payload
  // Update the final status of the transaction 
  // you had initially received from the customer 
  // and saved

  res.end( JSON.stringify(req.body.Body.stkCallback.ResultCode));
  console.log("Waiting for the next request!");
})

///////////////////////////////////////////////////////////
// lipa na mpesa query requests
// This allows us to query Mpesa to check what is the status of a transaction 
// just incase Mpesa took time in sending us a call back after we had earlier initiated a 
// request. Typically we expect a callback not more than 15 seconds. 
///////////////////////////////////////////////////////////
app.post('/mpesastkquery', function (req, res) {

 // create a new instance of the api
 const mpesa =  new Mpesa({
   consumerKey: Constants.paybill_client_key,
   consumerSecret: Constants.paybill_client_secret,
   environment: Constants.environment,
   shortCode: Constants.paybill_shortcode1,
   initiatorName: Constants.paybill_initiator_name,
   lipaNaMpesaShortCode: Constants.lipanampesa_shortcode,
   lipaNaMpesaShortPass: Constants.lipanampesa_passkey,
   securityCredential: Constants.paybill_security_credentials,
   certPath: path.resolve(Constants.certificatepath)
})
  // invoking the mpesa api
  mpesa
  .lipaNaMpesaQuery(
    req.body.CheckoutRequestID //This is the request id generated by mpesa from previous transations
    )
  .then(res => {
    //Do something with the response
    winston.log('info', res.data);
    res.end();
    })
    .catch(error => {
    //Do something with the error;
    winston.log('error', error);
    res.end();
    })
  
 console.log("Waiting for the next request!");
});


///////////////////////////////////////////////////////////
// b2c requests
// This API enables the company to send funds to the customer
///////////////////////////////////////////////////////////
app.post('/b2c', function (req, res) {

  // create a new instance of the api
  const mpesa =  new Mpesa({
    consumerKey: Constants.paybill_client_key,
    consumerSecret: Constants.paybill_client_secret,
    environment: Constants.environment,
    shortCode: Constants.paybill_shortcode1,
    initiatorName: Constants.paybill_initiator_name,
    lipaNaMpesaShortCode: Constants.lipanampesa_shortcode,
    lipaNaMpesaShortPass: Constants.lipanampesa_passkey,
    securityCredential: Constants.paybill_security_credentials,
    certPath: path.resolve(Constants.certificatepath)
})

    // invoking the mpesa api
    mpesa.b2c(
      Constants.paybill_shortcode1, 
      req.body.PhoneNumber, 
      req.body.Amount, 
      Constants.QueueTimeOutURL, 
      Constants.ResultURL, 
      Constants.CommandID, 
      Constants.paybill_initiator_name, 
      req.body.TransactionDesc, 
      Constants.Occassion
    ).then(res => {
    //Do something with the response
    winston.log('info', res.data);
      res.end();
    })
    .catch(error => {
    //Do something with the error;
    winston.log('error', error);
      res.end();
    })

    console.log("Waiting for the next request!");
});


///////////////////////////////////////////////////////////
// b2b requests
// This API enables the company to send funds from mpesa paybill to another business paybill which has mpesa
///////////////////////////////////////////////////////////
app.post('/b2b', function (req, res) {

  // create a new instance of the api
  const mpesa =  new Mpesa({
    consumerKey: Constants.paybill_client_key,
    consumerSecret: Constants.paybill_client_secret,
    environment: Constants.environment,
    shortCode: Constants.paybill_shortcode1,
    initiatorName: Constants.paybill_initiator_name,
    lipaNaMpesaShortCode: Constants.lipanampesa_shortcode,
    lipaNaMpesaShortPass: Constants.lipanampesa_passkey,
    securityCredential: Constants.paybill_security_credentials,
    certPath: path.resolve(Constants.certificatepath)
})

    // invoking the mpesa api
    mpesa.b2b(
      shortCode,
      testShortcode2,
      100,
      Constants.QueueTimeOutURL,
      Constants.ResultURL
      )
    .then(res => {
    //Do something with the response
    winston.log('info', res.data);
      res.end();
    })
    .catch(error => {
    //Do something with the error;
    winston.log('error', error);
      res.end();
    })

    console.log("Waiting for the next request!");
});

///////////////////////////////////////////////////////////
// Transaction status
// Transaction Status API checks the status of a B2C and C2B APIs transactions.
///////////////////////////////////////////////////////////
app.post('/b2bandb2candc2bTransactionStatus', function (req, res) {
    
  // credentials used in executing the mpesa api
  const mpesa =  new Mpesa({
    consumerKey: Constants.paybill_client_key,
    consumerSecret: Constants.paybill_client_secret,
    environment: Constants.environment,
    shortCode: Constants.paybill_shortcode1,
    initiatorName: Constants.paybill_initiator_name,
    lipaNaMpesaShortCode: Constants.lipanampesa_shortcode,
    lipaNaMpesaShortPass: Constants.lipanampesa_passkey,
    securityCredential: Constants.paybill_security_credentials,
    certPath: path.resolve(Constants.certificatepath)
  })

  // invoking the mpesa api
  mpesa
  .transactionStatus(
    'LKXXXX1234',
     shortCode,
      4,
    Constants.QueueTimeOutURL,
    Constants.ResultURL
    )
  .then(res => {
    //Do something with the response
    winston.log('info', res.data);
    res.end();
    })
    .catch(error => {
    //Do something with the error;
    winston.log('error', error);
    res.end();
    })
  
 console.log("Waiting for the next request!");
});

///////////////////////////////////////////////////////////
// Reversal
// Reverses a B2C or C2B M-Pesa transaction.
///////////////////////////////////////////////////////////
app.post('/b2bandb2candc2bReversal', function (req, res) {
    
  // credentials used in executing the mpesa api
  const mpesa =  new Mpesa({
    consumerKey: Constants.paybill_client_key,
    consumerSecret: Constants.paybill_client_secret,
    environment: Constants.environment,
    shortCode: Constants.paybill_shortcode1,
    initiatorName: Constants.paybill_initiator_name,
    lipaNaMpesaShortCode: Constants.lipanampesa_shortcode,
    lipaNaMpesaShortPass: Constants.lipanampesa_passkey,
    securityCredential: Constants.paybill_security_credentials,
    certPath: path.resolve(Constants.certificatepath)
  })
  // invoking the mpesa api
  mpesa
  .reversal(
    'LKXXXX1234',
     100,
     Constants.QueueTimeOutURL,
     Constants.ResultURL
    )
  .then(res => {
    //Do something with the response
    winston.log('info', res.data);
    res.end();
    })
    .catch(error => {
    //Do something with the error;
    winston.log('error', error);
    res.end();
    })
  
 console.log("Waiting for the next request!");
});

///////////////////////////////////////////////////////////
// account balance
// The Account Balance API requests for the account balance of a shortcode.
///////////////////////////////////////////////////////////
app.post('/accountBalance', function (req, res) {
    
  // credentials used in executing the mpesa api
  const mpesa =  new Mpesa({
    consumerKey: Constants.paybill_client_key,
    consumerSecret: Constants.paybill_client_secret,
    environment: Constants.environment,
    shortCode: Constants.paybill_shortcode1,
    initiatorName: Constants.paybill_initiator_name,
    lipaNaMpesaShortCode: Constants.lipanampesa_shortcode,
    lipaNaMpesaShortPass: Constants.lipanampesa_passkey,
    securityCredential: Constants.paybill_security_credentials,
    certPath: path.resolve(Constants.certificatepath)
  })
  // invoking the mpesa api
  mpesa
  .accountBalance(
    shortCode,
     4,
     Constants.QueueTimeOutURL,
     Constants.ResultURL
   )
  .then(res => {
    //Do something with the response
    winston.log('info', res.data);
    res.end();
    })
    .catch(error => {
    //Do something with the error;
    winston.log('error', error);
    res.end();
    })
  
 console.log("Waiting for the next request!");
});

  //server listener
var server = http.createServer(app).listen(Constants.ServerPort, "0.0.0.0" , function () {
  
   var host = server.address().address
   var port = server.address().port
   console.log("Example app listening at http://%s:%s", host, port);
});

